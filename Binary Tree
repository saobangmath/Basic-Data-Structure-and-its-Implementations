//CE1007/CZ1007 Data Structures
// Week 13 Lab Tutorial - Binary Search Tree
// Question 1

#include <stdio.h>
#include <stdlib.h>

#define MAXSPACE 8

typedef struct _btnode{
    int item;
    struct _btnode *left;
    struct _btnode *right;
} BTNode;

void insertBSTNode(BTNode** cur, int item);
void printBTNode(BTNode *root, int space);
void deleteTree(BTNode *root);

int main()
{
    BTNode* root=NULL;
    int item;

    printf("Enter a list of numbers for a Binary Tree, terminated by any non-digit character: \n");
    while(scanf("%d",&item))
        insertBTNode(&root, item);
    scanf("%*s");

    printf("The Binary Search Tree:\n");
    printBTNode(root,0);

    deleteTree(root);
    root=NULL;
    return 0;
}

void printBTNode(BTNode *root,int space){
    // Base case
    if (root == NULL)
        return;
    // Increase distance between levels
    space += MAXSPACE;

    // "Reversed" inorder tree traversal
    printBTNode(root->right, space);

    printf("\n");
    for (int i = MAXSPACE; i < space; i++)
        printf(" ");
    printf("%d\n", root->item);

    printBTNode(root->left, space);
}

void deleteTree(BTNode *root){
    BTNode* temp;
    if(root !=NULL)
    {
        temp = root->right;
        deleteTree(root->left);
        free(root);
        deleteTree(temp);
    }
}

void insertBTNode(BTNode** cur, int item){
   /* Write your program code here */
   BTNode *new_node= malloc(sizeof(BTNode));
   new_node->item=item;
   new_node->left=NULL;
   new_node->right=NULL;
   if (*cur==NULL){
    *cur=new_node;
   }
   else{
    if ((*cur)->item==item){
        printf("Duplicated item:%d\n",(*cur)->item);
        }
    else if ((*cur)->item<item){
        if ((*cur)->right==NULL){
            (*cur)->right=new_node;
        }
        else{
            insertBTNode(&(*cur)->right,item);
            }
        }

    else{
        if ((*cur)->left==NULL){
            (*cur)->left=new_node;
        }
        else{
            insertBTNode(&(*cur)->left,item);
            }
        }
    }
}
// check is Binary Search Tree?? 
bool checkBST(Node* root) {
        return isBST(root,-1,1000000);    
    }		
    bool isBST(Node* root,int min,int max){
        if (root==NULL){
            return 1;
        }
        else{
            if (root->data <= min || root->data >=max){
                return 0;
            }
            else {
                return isBST(root->left,min,root->data)
                     &&isBST(root->right,root->data,max);
            }
        }
    }
